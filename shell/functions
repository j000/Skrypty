# JarosÅ‚aw Rymut, 2020
####################

invalid_option() {
	echo "Invalid option ${1-provided}" 1>&2
	exit 1
}

log() {
	echo "$@" >&8
}

random() {
	(( $# == 0 )) && return $RANDOM
	tmp=$RANDOM
	(( cutoff = 32767 % $1 ))
	while (( $tmp <= $cutoff )); do
		tmp=$RANDOM
	done
	return $((1 + $tmp % $1))
}

max() {
	(( $# != 2 )) && return 1
	echo $(( $1 > $2 ? $1 : $2 ))
}

min() {
	(( $# != 2 )) && return 1
	echo $(( $1 < $2 ? $1 : $2 ))
}

limit() {
	(( $# != 3 )) && return 1
	echo $(min $(max $1 $2) $3)
}

####################

change_char() {
	if (( $# == 0 )); then
		echo " "
		return
	fi
	case $1 in
		' ') printf "\u2591";;
		-1) echo 'M';;
		*) echo "$1";;
	esac
}

clear() {
	(( verbose )) && return
	printf "\e[2J\e[H"
}

print_map() {
	printf "   "
	for x in $(seq $width); do
		printf "%2d " $x
	done
	echo
	for y in $(seq $height); do
		printf "%2d " $y
		for x in $(seq $width); do
			ind=$(index $x $y)
			if (( $cursor_x == $x && $cursor_y == $y )); then
				printf ">"
			else
				printf " "
			fi
			if (( ${revealed[$(index $x $y)]-0} == 1 )); then
				printf "%s" "$(change_char ${map[$ind]- })"
			else
				printf "%s" "$(change_char ' ')"
			fi
			if (( $cursor_x == $x && $cursor_y == $y )); then
				printf "<"
			else
				printf " "
			fi
		done
		echo
	done
}

####################

index() {
	echo $((${2-0} * ${width-0} + ${1-0}))
}

place_mine(){
	while
		random $width
		x=$?
		random $height
		y=$?
		ind=$(index $x $y)
		(( ${map[$ind]:=0} == -1 ))
	do :; done

	log "Mine is on $x $y ($ind)"
	(( map[$ind] = -1 ))

	for dy in -1 0 1; do
		for dx in -1 0 1; do
			[[ $dx -eq 0 && $dy -eq 0 ]] && continue
			[[ $x -eq 1 && $dx -eq -1 ]] && continue
			[[ $x -eq $width && $dx -eq 1 ]] && continue
			[[ $y -eq 1 && $dy -eq -1 ]] && continue
			[[ $y -eq $height && $dy -eq 1 ]] && continue
			tmp=$(index $(($x + $dx)) $(($y + $dy)))
			[[ ${map[$tmp]-0} -eq -1 ]] && continue
			(( map[$tmp] = ${map[$tmp]-0} + 1 ))
		done
	done
}
